#!/usr/bin/python
# -*- coding: UTF-8 -*-

from Tkinter import *
import webbrowser

root = Tk()
text = Text(root, width=32, height=6, font=("Times", "16", "bold italic"))
text.pack()
paragraph = '''012345678901234567890123456789
012345678901234567890123456789
012345678901234567890123456789'''
text.insert(CURRENT, paragraph)

text.tag_add("a", "1.7", "1.12", "1.16")  # 索引双数为范围，单数为一个字符
text.tag_config("a", background="yellow", foreground="red", underline=True,
                font=("Times", "20", "bold italic"))  # config是设置样式 foreground是前景色，字体颜色

def show_arrow_cursor(*args):
    text.config(cursor="arrow")  # 箭头

def show_xterm_cursor(*args):
    text.config(cursor="xterm")  # 光标线

def click(*args):
    webbrowser.open("http://www.baidu.com")

text.tag_bind("a", "<Enter>", show_arrow_cursor)  # <Enter>是鼠标进入的样式
text.tag_bind("a", "<Leave>", show_xterm_cursor)  # 鼠标离开
text.tag_bind("a", "<Button-1>", click)  # 单击样式
# def tag_bind(self, tagName, sequence, func, add=None):

root.mainloop()

"""
    SEQUENCE is a string of concatenated event
    patterns. An event pattern is of the form
    <MODIFIER-MODIFIER-TYPE-DETAIL> where MODIFIER is one
    of Control, Mod2, M2, Shift, Mod3, M3, Lock, Mod4, M4,
    Button1, B1, Mod5, M5 Button2, B2, Meta, M, Button3,
    B3, Alt, Button4, B4, Double, Button5, B5 Triple,
    Mod1, M1. TYPE is one of Activate, Enter, Map,
    ButtonPress, Button, Expose, Motion, ButtonRelease
    FocusIn, MouseWheel, Circulate, FocusOut, Property,
    Colormap, Gravity Reparent, Configure, KeyPress, Key,
    Unmap, Deactivate, KeyRelease Visibility, Destroy,
    Leave and DETAIL is the button number for ButtonPress,
    ButtonRelease and DETAIL is the Keysym for KeyPress and
    KeyRelease. Examples are
    <Control-Button-1> for pressing Control and mouse button 1 or
    <Alt-A> for pressing A and the Alt key (KeyPress can be omitted).
    An event pattern can also be a virtual event of the form
    <<AString>> where AString can be arbitrary. This
    event can be generated by event_generate.
    If events are concatenated they must appear shortly
    after each z.

    FUNC will be called if the event sequence occurs with an
    instance of Event as argument. If the return value of FUNC is
    "break" no further bound function is invoked.

    An additional boolean parameter ADD specifies whether FUNC will
    be called additionally to the z bound function or whether
    it will replace the previous function.

    Bind will return an identifier to allow deletion of the bound function with
    unbind without memory leak.

    If FUNC or SEQUENCE is omitted the bound function or list
    of bound events are returned."""
